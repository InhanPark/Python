#N*N 행렬 A가 있다. 행렬의 각 원소는 1 이상 N*N 이하의 자연수로 모두 서로 다르다. 이 문제에서는 i행 j열의 원소를 A[i,j]로 표기한다.
#당신은 이 행렬을 정렬하고자 한다. 행렬이 정렬되었다는 것은, 모든 1<=i,j<=N에 대해 A[i,j]=(i-1) x N + j가 성립한다는 것이다.
#이를 위해 당신은 아래 연산을 원하는 만큼 (0회 포함) 반복할 수 있다.

#   1 이상 N이하의 정수 x를 고른다.
#   1행 ~ x행, 1열 ~ x열에 해당하는 x*x크기의 부분행렬을 전치(transpose)시킨다. 
#   그러면, 모든 1<= i,j <=x에 대해, A[i,j]는 기존A[j,i]의 값으로 바뀐다.

#이러한 방식으로 정렬 가능한 행렬 A가 주어졌을 때, 
#A를 정렬하기 위해 연산을 최소 몇 회 사용해야 하는지 구하는 프로그램을 작성하라

#입력 :
#첫 번째 줄에 테스트 케이스의 수 가 주어진다.
#각 테스트 케이스의 첫 번째 줄에는 행렬의 크기 N(4<=N<=64)가 주어진다.
# 다음 N개 줄에는 행렬의 각 원소가 주어지는데, 이 중 i번째 줄의 j번째 자연수가 A[i,j]이다.
#테스트 케이스의 개수는 2000개 이상으로 상당히 많음에 유의하라.

#출력 :
#각 테스트 케이스마다, A를 정렬하기 위해 사용해야 하는 연산의 최소 횟수를 한 줄에 하나씩 출력한다.


#풀이 :
#이 matrix는 1행 1열부터 x행 x열까지의 정사각형 모양의 부분행렬을 전치시키는 것만으로
#각 행렬에 순서대로 숫자가 들어가야 한다
#즉, 이 방법으로 정렬시킬 수 없는 행렬은 테스트로 주어지지 않는다
#그러므로, 현재의 matrix의 첫 열이 목표와 얼마나 다른지를 통해
#이 행렬을 몇 번 전치시켜야 하는지 알 수 있다
def matrix_alignment(matrix, num_size):
    """matrix를 정렬하기 위해 필요한 전치의 횟수를 구한다"""

    #matrix의 첫 열이 정렬 후의 모습과 얼마나 다른지 확인한다
    #같다면 0으로, 다르다면 1로 표시한다
    #모두 같다면 [0,0,0,0,0], 모두 다르다면 [1,1,1,1,1]이라는 array가 만들어진다
    
    #핵심적으로 사용되는 Data
    array = []  #작업을 하는 array
    count = 0   #필요한 전치 횟수
    
    for i in range(num_size):
        if(i*num_size+1 != matrix[i][0]):
            array.append(1)
        else:
            array.append(0)

    #만들어진 array에 특정한 규칙을 적용하는 것으로 횟수를 알 수 있다
    #1. 서로 다른 부분들이 붙어있다면, 그 부분들은 한 번의 전치만으로 정렬시킬 수 있다
    #그러므로, array에서 서로 다른 숫자가 나타나는 것이 몇 번 일어나는지를 센다
    #2. array의 맨 마지막 숫자가 0이라면, 행렬의 가장 바깥쪽은 전치가 필요없다는 뜻이다
    #그러므로, 그 부분이 0이라면, 건너뛴다
    #3. array의 맨 첫번째는 문제의 특성상 무조건 0이며, 전치할 필요가 없다
    #그러므로, 서로 다른 숫자가 나타나는 경우로 세지 않는다
    #이 규칙에 따라, 범위를 array의 1번 index부터 마지막 index까지로 잡는다
    for i in reversed(range(1, num_size)):
        #array의 맨 마지막 숫자가 0이라면, 행렬의 가장 바깥쪽은 전치가 필요없다는 뜻이다
        #그러므로, 그 부분이 0이라면, 건너뛴다
        if i == num_size - 1 and array[i] == 0:
            continue
        #서로 다른 부분들이 붙어있다면, 그 부분들은 한 번의 전치만으로 정렬시킬 수 있다
        #그러므로, array에서 서로 다른 숫자가 나타나는 것이 몇 번 일어나는지를 센다
        elif i == 1 or array[i] == array[i-1]:
            continue
        else:
            count = count + 1
    if count > 1:
        count += 1
    return count


if __name__ == '__main__':
    num_case = int(input()) #테스트 케이스의 수
    #테스트 케이스의 수만큼 반복한다
    for i in range(num_case):
        num_size = int(input()) #matrix의 사이즈
        matrix = [] #정렬할 행렬
        #행렬을 input으로 받는다
        for j in range(num_size):
            matrix.append(list(map(int, input().split())))
        #행렬의 필요 전치수를 계산한다
        result = matrix_alignment(matrix, num_size)
        print(result)   #결과값